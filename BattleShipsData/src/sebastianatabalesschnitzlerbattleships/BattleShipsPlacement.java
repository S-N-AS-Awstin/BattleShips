/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sebastianatabalesschnitzlerbattleships;

import java.awt.Color;
import java.awt.Toolkit;
import static sebastianatabalesschnitzlerbattleships.Coordinates.acceptedChars;

/**
 *
 * @author Seb
 */
public class BattleShipsPlacement extends javax.swing.JFrame {

    /**
     * Creates new form BattleShipsPlacement
     */
    public BattleShipsPlacement() {
        initComponents();
    setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTNSub1 = new javax.swing.JButton();
        BTNSub2 = new javax.swing.JButton();
        BTNDest = new javax.swing.JButton();
        BTNBattle = new javax.swing.JButton();
        BTNAir = new javax.swing.JButton();
        xAxisCoords = new javax.swing.JTextField();
        yAxisCoords = new javax.swing.JTextField();
        LBLCurrentCords = new javax.swing.JLabel();
        currentCoordinates = new javax.swing.JLabel();
        LBLCurrent = new javax.swing.JLabel();
        LBLPlace = new javax.swing.JLabel();
        LBLSelected = new javax.swing.JLabel();
        LBLXAxis = new javax.swing.JLabel();
        LBLYAxis = new javax.swing.JLabel();
        GRID = new javax.swing.JLabel();
        LBLAllCaps = new javax.swing.JLabel();
        BTNSubmit = new javax.swing.JButton();
        BTNRotate = new javax.swing.JToggleButton();
        LBLReady = new javax.swing.JLabel();
        BTNNextScene = new javax.swing.JButton();
        LBLCurrentlyRotated = new javax.swing.JLabel();
        LBLRotate = new javax.swing.JLabel();
        Randomize = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sebastian's BATTLESHIPS - Placing Your Fleet!");
        setBackground(new java.awt.Color(51, 51, 51));

        BTNSub1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/Sub1.png"))); // NOI18N
        BTNSub1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNSub1ActionPerformed(evt);
            }
        });

        BTNSub2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/Sub2.png"))); // NOI18N
        BTNSub2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNSub2ActionPerformed(evt);
            }
        });

        BTNDest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/Destroyer.png"))); // NOI18N
        BTNDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNDestActionPerformed(evt);
            }
        });

        BTNBattle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/BattleShip.png"))); // NOI18N
        BTNBattle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNBattleActionPerformed(evt);
            }
        });

        BTNAir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/AircraftCarrier.png"))); // NOI18N
        BTNAir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNAirActionPerformed(evt);
            }
        });

        xAxisCoords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xAxisCoordsActionPerformed(evt);
            }
        });

        LBLCurrentCords.setFont(new java.awt.Font("PT Serif", 2, 18)); // NOI18N
        LBLCurrentCords.setText("Current Coordinates:");

        currentCoordinates.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        LBLCurrent.setFont(new java.awt.Font("NSimSun", 0, 18)); // NOI18N
        LBLCurrent.setText("Currently Selected:");

        LBLPlace.setFont(new java.awt.Font("Impact", 1, 48)); // NOI18N
        LBLPlace.setForeground(new java.awt.Color(20, 221, 200));
        LBLPlace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBLPlace.setText("PLACE YOUR SHIPS");

        LBLSelected.setFont(new java.awt.Font("NSimSun", 1, 24)); // NOI18N

        LBLXAxis.setFont(new java.awt.Font("PT Serif", 1, 18)); // NOI18N
        LBLXAxis.setText("Letter Co-ordinates (X axis)");

        LBLYAxis.setFont(new java.awt.Font("PT Serif", 1, 18)); // NOI18N
        LBLYAxis.setText("Number Co-ordinates (Y Axis)");

        GRID.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/Grid.png"))); // NOI18N

        LBLAllCaps.setText("(ALL CAPS)");

        BTNSubmit.setText("Submit Co-ordinates");
        BTNSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNSubmitActionPerformed(evt);
            }
        });

        BTNRotate.setBackground(new java.awt.Color(51, 204, 0));
        BTNRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/Rotate.png"))); // NOI18N
        BTNRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNRotateActionPerformed(evt);
            }
        });

        LBLReady.setFont(new java.awt.Font("PT Serif", 0, 18)); // NOI18N
        LBLReady.setForeground(new java.awt.Color(102, 0, 0));
        LBLReady.setText("Not Ready...");

        BTNNextScene.setBackground(new java.awt.Color(51, 102, 0));
        BTNNextScene.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sebastianatabalesschnitzlerbattleships/CheckMark.png"))); // NOI18N
        BTNNextScene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNNextSceneActionPerformed(evt);
            }
        });

        LBLCurrentlyRotated.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        LBLCurrentlyRotated.setText("Currently Rotated:");

        LBLRotate.setFont(new java.awt.Font("PT Serif", 0, 18)); // NOI18N
        LBLRotate.setForeground(new java.awt.Color(0, 153, 0));
        LBLRotate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBLRotate.setText("Horizontal");

        Randomize.setText("RANDOMIZE ALL");
        Randomize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LBLPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LBLCurrent)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(BTNSub1)
                                            .addComponent(BTNSub2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BTNRotate, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(LBLCurrentlyRotated)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(BTNAir)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                                                .addComponent(Randomize))
                                            .addComponent(BTNBattle)
                                            .addComponent(BTNDest))
                                        .addGap(12, 12, 12))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(LBLRotate)
                                        .addGap(32, 32, 32)))
                                .addComponent(GRID))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LBLSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(BTNNextScene, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LBLReady)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LBLAllCaps)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(xAxisCoords, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(65, 65, 65)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(LBLCurrentCords)
                                                        .addGap(39, 39, 39))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(currentCoordinates, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(64, 64, 64)))
                                                .addComponent(yAxisCoords, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(116, 116, 116))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LBLXAxis)
                                                .addGap(18, 18, 18)
                                                .addComponent(LBLYAxis)))
                                        .addGap(3, 3, 3))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(BTNSubmit)
                                        .addGap(191, 191, 191)))))
                        .addGap(87, 87, 87))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LBLPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTNSub1)
                        .addGap(18, 18, 18)
                        .addComponent(BTNSub2)
                        .addGap(60, 60, 60)
                        .addComponent(BTNDest)
                        .addGap(37, 37, 37)
                        .addComponent(BTNBattle)
                        .addGap(65, 65, 65)
                        .addComponent(BTNAir))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(BTNRotate)
                            .addGap(18, 18, 18)
                            .addComponent(LBLCurrentlyRotated)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(LBLRotate)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Randomize, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(GRID)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LBLCurrent)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LBLXAxis)
                            .addComponent(LBLYAxis))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(yAxisCoords, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(LBLCurrentCords)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentCoordinates, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(xAxisCoords, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LBLAllCaps))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(BTNSubmit)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LBLSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BTNNextScene, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(LBLReady)))
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // 0 = submarine1, 1 = submarine2, 2 = destroyer, 3 = BattleShip, 4 = Aircraft Carrier
    // Each of these contains an array of coordinates. 
    Coordinates[] submarine1 = new Coordinates[2];
    Coordinates[] submarine2 = new Coordinates[2];
    Coordinates[] destroyer = new Coordinates[3];
    Coordinates[] battleship = new Coordinates[4];
    Coordinates[] aircraftCarrier = new Coordinates[5];
    
    // index - allows for selection processess through methods and 
    // more importanly, makes them editable via the buttons
    int index = 6;
    
    /**
     * findChar - finds the index of the X coordinate or char in the acceptedChars array, and
     * assigns said value to am int. (example 'A' index in acceptedChars is 0, therefor
     *  if c = 'A', the value sent back will be 0)
     * @param c - X coordinate being submitted
     * @param i - index (allows for recursion)
     * @return int - the index of the char (c) in the acceptedChars array
     */
    public int findChar(char c, int i)
    {
        if (c == acceptedChars[i])
        {
            return i;
        }
        else
        {
           return findChar(c, i+1);
        }
    }
    /**
     * nullification - resets the Coordinates of a selected ship to null.
     * @param nullNumber - a selection number depending on what ship's values need to be
     * reset
     */
    public void nullification(int nullNumber)
    {
        if (nullNumber == 0){
        for (int i = 0; i <= submarine1.length - 1; i++)
        {
            submarine1[i] = null;
        }
        }
        if (nullNumber == 1){
        for (int i = 0; i <= submarine2.length - 1; i++)
        {
            submarine2[i] = null;
        }
        }
        if (nullNumber == 2){
        for (int i = 0; i <= destroyer.length - 1; i++)
        {
            destroyer[i] = null;
        }
        }
        if (nullNumber == 3){
        for (int i = 0; i <= battleship.length - 1; i++)
        {
            battleship[i] = null;
        }
        }
        if (nullNumber == 4){
        for (int i = 0; i <= aircraftCarrier.length - 1; i++)
        {
            aircraftCarrier[i] = null;
        }
        }
    }
    /**
     * shipFullCoordinates - Calculates and displays all the Coordinates. HORIZONTALLY.
     * officially placing the ship on the grid.
     * @param c - X coordinate
     * @param n - Y coordinate
     */
    public void shipFullCoordinates(char c, int n)
    {
        try{
        int charIndex = findChar(c,0);
        switch (index)
        {
            // SUBMARINE 1
            case 0:
                submarine1[0] = new Coordinates(c,n);
                submarine1[1] = new Coordinates(acceptedChars[charIndex + 1],n);
                if (Coordinates.isValid(submarine1, submarine2, destroyer, battleship, aircraftCarrier)== false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else{
                LBLCurrentCords.setText("(" + submarine1[0].letterCord + "," + submarine1[0].numCord + ")" + "(" + submarine1[1].letterCord + "," + submarine1[1].numCord + ")");
                }
               break;
            // SUBMARINE 2
            case 1:
                submarine2[0] = new Coordinates(c,n);
                submarine2[1] = new Coordinates(acceptedChars[charIndex + 1],n);
                if (Coordinates.isValid(submarine2, submarine1, destroyer, battleship, aircraftCarrier) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else{
                LBLCurrentCords.setText("(" + submarine2[0].letterCord + "," + submarine2[0].numCord + ")" + "(" + submarine2[1].letterCord + "," + submarine2[1].numCord + ")");
                }
               break;
            // DESTROYER
            case 2:
                destroyer[0] = new Coordinates(c,n);
                destroyer[1] = new Coordinates(acceptedChars[charIndex + 1],n);
                destroyer[2] = new Coordinates(acceptedChars[charIndex + 2],n);
                if (Coordinates.isValid(destroyer, submarine2, submarine1, battleship, aircraftCarrier)== false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else {
                LBLCurrentCords.setText("(" + destroyer[0].letterCord + "," + destroyer[0].numCord + ")" + "(" + destroyer[1].letterCord + "," + destroyer[1].numCord + ")"
                + "(" + destroyer[2].letterCord + "," + destroyer[2].numCord + ")");
                }
               break;
            // BATTLESHIP
            case 3:
                battleship[0] = new Coordinates(c,n);
                battleship[1] = new Coordinates(acceptedChars[charIndex + 1],n);
                battleship[2] = new Coordinates(acceptedChars[charIndex + 2],n);
                battleship[3] = new Coordinates(acceptedChars[charIndex + 3],n);
                if (Coordinates.isValid(battleship, submarine2, destroyer, submarine1, aircraftCarrier) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else {
                LBLCurrentCords.setText("(" + battleship[0].letterCord + "," + battleship[0].numCord + ")" + "(" + battleship[1].letterCord + "," + battleship[1].numCord + ")" +
                "(" + battleship[2].letterCord + "," + battleship[2].numCord + ")" + "(" + battleship[3].letterCord + "," + battleship[3].numCord + ")");
                }
               break;
            // AIRCRAFT CARRIER
            case 4:
               aircraftCarrier[0] = new Coordinates(c,n);
               aircraftCarrier[1] = new Coordinates(acceptedChars[charIndex + 1],n);
               aircraftCarrier[2] = new Coordinates(acceptedChars[charIndex + 2],n);
               aircraftCarrier[3] = new Coordinates(acceptedChars[charIndex + 3],n);
               aircraftCarrier[4] = new Coordinates(acceptedChars[charIndex + 4],n);
                if (Coordinates.isValid(aircraftCarrier, submarine2, destroyer, battleship, submarine1) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else {
               LBLCurrentCords.setText("(" + aircraftCarrier[0].letterCord + "," + aircraftCarrier[0].numCord + ")" 
               + "(" + aircraftCarrier[1].letterCord + "," + aircraftCarrier[1].numCord + ")" + "(" + aircraftCarrier[2].letterCord + "," + aircraftCarrier[2].numCord + ")"
               + "(" + aircraftCarrier[3].letterCord + "," + aircraftCarrier[3].numCord + ")" + "(" + aircraftCarrier[4].letterCord + "," + aircraftCarrier[4].numCord + ")");
                }
              break;
            // No ship selected
            case 6:
                LBLCurrentCords.setText("Please select a ship");
               break;
        }
    }
        // In case the ship goes outside of the grid during its process
        // It will stop and reset all the values of the selected ship.
        catch(ArrayIndexOutOfBoundsException exception)
        {
            LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT");
            nullification(index);
        }
}
    /**
     * checks if the selected ship is within the boundaries of the grid
     * @param chosenOne - What ship type is selected
     * @return 
     */
    public boolean isWithinGrid(Coordinates[] chosenOne)
    {
        for (int i = 0; i< chosenOne.length; i++)
        {
            if (chosenOne[i].numCord > 7)
            {
                return false;
            }
        }
        return true;
    }
    /**
     * shipFullCoordinates - Calculates and displays all the Coordinates. VERTOCALLY.
     * officially placing the ship on the grid.
     * @param c - X coordinate
     * @param n - Y coordinate
     */
    public void shipFullCoordinatesVert(char c, int n)
    {
        switch (index)
        {
            // SUBMARINE 1
            case 0:
                submarine1[0] = new Coordinates(c,n);
                submarine1[1] = new Coordinates(c,n+1);
                if (Coordinates.isValid(submarine1, submarine2, destroyer, battleship, aircraftCarrier)== false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else if (isWithinGrid(submarine1) == false)
                {
                    LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT!");
                    nullification(index);
                }
                else{
                LBLCurrentCords.setText("(" + submarine1[0].letterCord + "," + submarine1[0].numCord + ")" + "(" + submarine1[1].letterCord + "," + submarine1[1].numCord + ")");
                }
               break;
            // SUBMARINE 2
            case 1:
                submarine2[0] = new Coordinates(c,n);
                submarine2[1] = new Coordinates(c,n+1);
                if (Coordinates.isValid(submarine2, submarine1, destroyer, battleship, aircraftCarrier) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else if (isWithinGrid(submarine2) == false)
                {
                    LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT!");
                    nullification(index);
                }
                else{
                LBLCurrentCords.setText("(" + submarine2[0].letterCord + "," + submarine2[0].numCord + ")" + "(" + submarine2[1].letterCord + "," + submarine2[1].numCord + ")");
                }
               break;
            // DESTROYER
            case 2:
                destroyer[0] = new Coordinates(c,n);
                destroyer[1] = new Coordinates(c,n+1);
                destroyer[2] = new Coordinates(c,n+2);
                if (Coordinates.isValid(destroyer, submarine2, submarine1, battleship, aircraftCarrier)== false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else if (isWithinGrid(destroyer) == false)
                {
                    LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT!");
                    nullification(index);
                }
                else {
                LBLCurrentCords.setText("(" + destroyer[0].letterCord + "," + destroyer[0].numCord + ")" + "(" + destroyer[1].letterCord + "," + destroyer[1].numCord + ")"
                + "(" + destroyer[2].letterCord + "," + destroyer[2].numCord + ")");
                }
               break;
            // BATTLESHIP
            case 3:
                battleship[0] = new Coordinates(c,n);
                battleship[1] = new Coordinates(c,n+1);
                battleship[2] = new Coordinates(c,n+2);
                battleship[3] = new Coordinates(c,n+3);
                if (Coordinates.isValid(battleship, submarine2, submarine1, destroyer, aircraftCarrier) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else if (isWithinGrid(battleship) == false)
                {
                    LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT!");
                    nullification(index);
                }
                else {
                LBLCurrentCords.setText("(" + battleship[0].letterCord + "," + battleship[0].numCord + ")" + "(" + battleship[1].letterCord + "," + battleship[1].numCord + ")" +
                "(" + battleship[2].letterCord + "," + battleship[2].numCord + ")" + "(" + battleship[3].letterCord + "," + battleship[3].numCord + ")");
                }
               break;
            // AIRCRAFT CARRIER
            case 4:
               aircraftCarrier[0] = new Coordinates(c,n);
               aircraftCarrier[1] = new Coordinates(c,n+1);
               aircraftCarrier[2] = new Coordinates(c,n+2);
               aircraftCarrier[3] = new Coordinates(c,n+3);
               aircraftCarrier[4] = new Coordinates(c,n+4);
                if (Coordinates.isValid(aircraftCarrier, submarine2, submarine1, destroyer, battleship) == false) 
                {
                    LBLCurrentCords.setText("Overlapping with another ship!");
                    nullification(index);
                }
                else if (isWithinGrid(aircraftCarrier) == false)
                {
                    LBLCurrentCords.setText("SHIP IS TOO LARGE TO FIT!");
                    nullification(index);
                }
                else {
               LBLCurrentCords.setText("(" + aircraftCarrier[0].letterCord + "," + aircraftCarrier[0].numCord + ")" 
               + "(" + aircraftCarrier[1].letterCord + "," + aircraftCarrier[1].numCord + ")" + "(" + aircraftCarrier[2].letterCord + "," + aircraftCarrier[2].numCord + ")"
               + "(" + aircraftCarrier[3].letterCord + "," + aircraftCarrier[3].numCord + ")" + "(" + aircraftCarrier[4].letterCord + "," + aircraftCarrier[4].numCord + ")");
                }
              break;
            // No ship selected
            case 6:
                LBLCurrentCords.setText("Please select a ship");
               break;
    }
}
    
// see buttonPressed 
    private void BTNSub1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNSub1ActionPerformed
        // TODO add your handling code here:
        buttonPressed(0);
    }//GEN-LAST:event_BTNSub1ActionPerformed
// see buttonPressed
    private void BTNSub2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNSub2ActionPerformed
        // TODO add your handling code here:
        buttonPressed(1);
    }//GEN-LAST:event_BTNSub2ActionPerformed
// see buttonPressed
    private void BTNDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNDestActionPerformed
        // TODO add your handling code here:
        buttonPressed(2);
    }//GEN-LAST:event_BTNDestActionPerformed
// see buttonPressed
    private void BTNBattleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNBattleActionPerformed
        // TODO add your handling code here:
        buttonPressed(3);
    }//GEN-LAST:event_BTNBattleActionPerformed
// see buttonPressed
    private void BTNAirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNAirActionPerformed
        // TODO add your handling code here:
        buttonPressed(4);
    }//GEN-LAST:event_BTNAirActionPerformed
    /**
     * Not placed yet....
     */
    public void notPlacedYet()
    {
        LBLCurrentCords.setText("Not Placed Yet");
        
    }
    /**
     * buttonPressed - detects through an int value what button has been pressed.
     * It then promptly displays it to the GUI and changes the global index value
     * according to the ship type;
     * @param n - A navigator for the switch statement. Each button sends a different one
     */
    public void buttonPressed(int n)
    {
        switch (n)
        {
            // SUBMARINE 1
            case 0:
                LBLSelected.setForeground(Color.RED); LBLSelected.setText("SUBMARINE 1");
                index = 0; 
                if (submarine1[0] == null){
                    notPlacedYet();
                } 
                else{ // if the submarine has been placed, it will display its coordinates
                LBLCurrentCords.setText("(" + submarine1[0].letterCord + "," + submarine1[0].numCord + ")" + "(" + submarine1[1].letterCord + "," + submarine1[1].numCord + ")");
                }
            break;
            // SUBMARINE 2
            case 1:
                LBLSelected.setForeground(Color.magenta); LBLSelected.setText("SUBMARINE 2");
                index = 1; 
                if (submarine2[0] == null){
                    notPlacedYet();
                } 
                else{ // if the submarine has been placed, it will display its coordinates
                LBLCurrentCords.setText("(" + submarine2[0].letterCord + "," + submarine2[0].numCord + ")" + "(" + submarine2[1].letterCord + "," + submarine2[1].numCord + ")");
                }
            break;
            // DESTROYER
            case 2:
                LBLSelected.setForeground(Color.BLUE); LBLSelected.setText("DESTROYER");
                index = 2; if (destroyer[0] == null){notPlacedYet();} 
                else{ // if the destroyer has been placed, it will display its coordinates
                LBLCurrentCords.setText("(" + destroyer[0].letterCord + "," + destroyer[0].numCord + ")" + "(" + destroyer[1].letterCord + "," + destroyer[1].numCord + ")"
                + "(" + destroyer[2].letterCord + "," + destroyer[2].numCord + ")");
                }
            break;
            // BATTLESHIP
            case 3:
                LBLSelected.setForeground(Color.GREEN); LBLSelected.setText("BATTLESHIP");
                index = 3;
                if (battleship[0] == null){notPlacedYet();} 
                else{ // if the Battleship has been placed, it will display its coordinates
                LBLCurrentCords.setText("(" + battleship[0].letterCord + "," + battleship[0].numCord + ")" + "(" + battleship[1].letterCord + "," + battleship[1].numCord + ")" +
                "(" + battleship[2].letterCord + "," + battleship[2].numCord + ")" + "(" + battleship[3].letterCord + "," + battleship[3].numCord + ")");
                }
            break;
            // AIRCRAFT CARRIER
            case 4:
                LBLSelected.setForeground(Color.RED); LBLSelected.setText("AIRCRAFT CARRIER");
                index = 4; if (aircraftCarrier[0] == null){notPlacedYet();} 
                else { // if the submarine has been placed, it will display its coordinates
                LBLCurrentCords.setText("(" + aircraftCarrier[0].letterCord + "," + aircraftCarrier[0].numCord + ")" 
               + "(" + aircraftCarrier[1].letterCord + "," + aircraftCarrier[1].numCord + ")" + "(" + aircraftCarrier[2].letterCord + "," + aircraftCarrier[2].numCord + ")"
               + "(" + aircraftCarrier[3].letterCord + "," + aircraftCarrier[3].numCord + ")" + "(" + aircraftCarrier[4].letterCord + "," + aircraftCarrier[4].numCord + ")");
                }
            break;
        }
    }
/**
 * Checks if any of ships are not placed yet. Is relevant for the conditions to enter the next scene
 * @return True if their all placed, false if not
 */
    public boolean checkNull()
    {
        if(submarine1[1] != null && submarine2[1] != null && destroyer[2] != null && battleship[3] != null && aircraftCarrier[4] != null){
            return true;
        }else
        {
            return false;
        }
    }
    /**
     * The button "SUBMIT COORDINATES" - check if the values in the text field are valid,
     * then Communicates to other methods to place down the ships and give them all their values
     * different values are given depending on whether or not the rotation toggle button
     * was clicked.
     * @param evt 
     */
    private void BTNSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNSubmitActionPerformed
        // TODO add your handling code here:
        try {
        char xCoords = (xAxisCoords.getText()).charAt(0);
        int yCoords = Integer.parseInt(yAxisCoords.getText());
        if (Coordinates.isValid(xCoords, yCoords, 0) == false)
        {
            LBLCurrentCords.setText("INVALID SUBMISSION");
        }
        else if (rotate == false) // HORIZONTAL CONSTRUCTION
        {
            shipFullCoordinates(xCoords, yCoords);
        }
        else if (rotate == true) // VERTICAL CONSTRUCTION
        {
            shipFullCoordinatesVert(xCoords, yCoords);
        }
        }
        catch(NumberFormatException e) // If theres a letter in the number text box and vise versa
        {
            LBLCurrentCords.setText("INVALID FORMAT");
        }
        catch(StringIndexOutOfBoundsException siobe) // If empty
        {
            LBLCurrentCords.setText("TYPE IN THE BOX");
        }
        if (checkNull() == true)
        {
            LBLReady.setText("READY TO BATTLE"); LBLReady.setForeground(Color.GREEN);
        }
    }//GEN-LAST:event_BTNSubmitActionPerformed
    
    // A global variable that allows the button to comminicate with other methods
    // ROTATION
    boolean rotate = false;
    private void BTNRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNRotateActionPerformed
        // TODO add your handling code here:
        if (BTNRotate.isSelected()){ // If toggled on, the ships will form vertically
        rotate = true;
        LBLRotate.setText("Vertical");
        }
        else // If toggled off, the ships will form Horizontally
        {
        rotate = false;
        LBLRotate.setText("Horizontal");
        }
    }//GEN-LAST:event_BTNRotateActionPerformed

    private void BTNNextSceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNNextSceneActionPerformed
        // TODO add your handling code here:
        if (checkNull() == true){
            this.setVisible(false);
            BattleShipsBattle scene = new BattleShipsBattle(submarine1, submarine2, destroyer, battleship, aircraftCarrier);
            scene.setVisible(true);
        }
        
    }//GEN-LAST:event_BTNNextSceneActionPerformed

    private void xAxisCoordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xAxisCoordsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xAxisCoordsActionPerformed
    // sets all ships to random values
    private void RandomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeActionPerformed
        // TODO add your handling code here:
        BattleshipAI.aiFleetFormation(submarine1, submarine2, destroyer, battleship, aircraftCarrier);
        LBLReady.setText("READY TO BATTLE"); LBLReady.setForeground(Color.GREEN);
    }//GEN-LAST:event_RandomizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleShipsPlacement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleShipsPlacement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleShipsPlacement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleShipsPlacement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleShipsPlacement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNAir;
    private javax.swing.JButton BTNBattle;
    private javax.swing.JButton BTNDest;
    private javax.swing.JButton BTNNextScene;
    private javax.swing.JToggleButton BTNRotate;
    private javax.swing.JButton BTNSub1;
    private javax.swing.JButton BTNSub2;
    private javax.swing.JButton BTNSubmit;
    private javax.swing.JLabel GRID;
    private javax.swing.JLabel LBLAllCaps;
    private javax.swing.JLabel LBLCurrent;
    private javax.swing.JLabel LBLCurrentCords;
    private javax.swing.JLabel LBLCurrentlyRotated;
    private javax.swing.JLabel LBLPlace;
    private javax.swing.JLabel LBLReady;
    private javax.swing.JLabel LBLRotate;
    private javax.swing.JLabel LBLSelected;
    private javax.swing.JLabel LBLXAxis;
    private javax.swing.JLabel LBLYAxis;
    private javax.swing.JButton Randomize;
    private javax.swing.JLabel currentCoordinates;
    private javax.swing.JTextField xAxisCoords;
    private javax.swing.JTextField yAxisCoords;
    // End of variables declaration//GEN-END:variables
}
